// <auto-generated />
using System;
using Concert.Infrastructure.Service;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConcertAPI.Migrations
{
    [DbContext(typeof(DbService))]
    [Migration("20220324095952_userdb")]
    partial class userdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Concert.Domain.Entities.Concert.Artist", b =>
                {
                    b.Property<Guid>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Concert.Domain.Entities.Concert.ConcertArtist", b =>
                {
                    b.Property<Guid>("ConcertArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcertId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConcertArtistId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("ConcertId");

                    b.ToTable("ConcertArtists");
                });

            modelBuilder.Entity("Concert.Domain.Entities.Concert.ConcertDate", b =>
                {
                    b.Property<Guid>("DateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("DateId");

                    b.HasIndex("ConcertId");

                    b.ToTable("ConcertDate");
                });

            modelBuilder.Entity("Concert.Domain.Entities.Concert.ConcertModel", b =>
                {
                    b.Property<Guid>("ConcertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConcertId");

                    b.ToTable("Concerts");
                });

            modelBuilder.Entity("Concert.Domain.Entities.Concert.ConcertOrganiser", b =>
                {
                    b.Property<Guid>("ConcertOrganiserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganiserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConcertOrganiserId");

                    b.HasIndex("ConcertId");

                    b.HasIndex("OrganiserId");

                    b.ToTable("ConcertOrganiser");
                });

            modelBuilder.Entity("Concert.Domain.Entities.Concert.ConcertSponsor", b =>
                {
                    b.Property<Guid>("ConcertSponsorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SponsorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConcertSponsorId");

                    b.HasIndex("ConcertId");

                    b.HasIndex("SponsorId");

                    b.ToTable("ConcertSponsors");
                });

            modelBuilder.Entity("Concert.Domain.Entities.Concert.Organiser", b =>
                {
                    b.Property<Guid>("OrganiserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganiserId");

                    b.ToTable("Organiser");
                });

            modelBuilder.Entity("Concert.Domain.Entities.Concert.Sponsor", b =>
                {
                    b.Property<Guid>("SponsorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SponsorLevel")
                        .HasColumnType("int");

                    b.HasKey("SponsorId");

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("Concert.Domain.Entities.Concert.Ticket", b =>
                {
                    b.Property<Guid>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Package")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("ConcertId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Concert.Domain.Entities.Concert.ConcertArtist", b =>
                {
                    b.HasOne("Concert.Domain.Entities.Concert.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concert.Domain.Entities.Concert.ConcertModel", "Concert")
                        .WithMany()
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Concert");
                });

            modelBuilder.Entity("Concert.Domain.Entities.Concert.ConcertDate", b =>
                {
                    b.HasOne("Concert.Domain.Entities.Concert.ConcertModel", "Concert")
                        .WithMany()
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concert");
                });

            modelBuilder.Entity("Concert.Domain.Entities.Concert.ConcertOrganiser", b =>
                {
                    b.HasOne("Concert.Domain.Entities.Concert.ConcertModel", "Concert")
                        .WithMany()
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concert.Domain.Entities.Concert.Organiser", "Organiser")
                        .WithMany()
                        .HasForeignKey("OrganiserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concert");

                    b.Navigation("Organiser");
                });

            modelBuilder.Entity("Concert.Domain.Entities.Concert.ConcertSponsor", b =>
                {
                    b.HasOne("Concert.Domain.Entities.Concert.ConcertModel", "Concert")
                        .WithMany()
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concert.Domain.Entities.Concert.Sponsor", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concert");

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("Concert.Domain.Entities.Concert.Ticket", b =>
                {
                    b.HasOne("Concert.Domain.Entities.Concert.ConcertModel", "Concert")
                        .WithMany()
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concert");
                });
#pragma warning restore 612, 618
        }
    }
}
